// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson163c17a9DecodeEffectiveMobileInternalDomainModels(in *jlexer.Lexer, out *Songs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Songs, 0, 0)
			} else {
				*out = Songs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Song
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeEffectiveMobileInternalDomainModels(out *jwriter.Writer, in Songs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Songs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Songs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Songs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Songs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels(l, v)
}
func easyjson163c17a9DecodeEffectiveMobileInternalDomainModels1(in *jlexer.Lexer, out *SongDetail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "releaseDate":
			out.ReleaseDate = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeEffectiveMobileInternalDomainModels1(out *jwriter.Writer, in SongDetail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"releaseDate\":"
		out.RawString(prefix[1:])
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SongDetail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SongDetail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SongDetail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SongDetail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels1(l, v)
}
func easyjson163c17a9DecodeEffectiveMobileInternalDomainModels2(in *jlexer.Lexer, out *Song) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "group_id":
			out.GroupID = string(in.String())
		case "song":
			out.Name = string(in.String())
		case "release_date":
			out.ReleaseDate = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeEffectiveMobileInternalDomainModels2(out *jwriter.Writer, in Song) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.String(string(in.GroupID))
	}
	{
		const prefix string = ",\"song\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.String(string(in.ReleaseDate))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Song) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Song) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Song) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Song) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels2(l, v)
}
func easyjson163c17a9DecodeEffectiveMobileInternalDomainModels3(in *jlexer.Lexer, out *Lyric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verse_number":
			out.VerseNumber = int(in.Int())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeEffectiveMobileInternalDomainModels3(out *jwriter.Writer, in Lyric) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"verse_number\":"
		out.RawString(prefix[1:])
		out.Int(int(in.VerseNumber))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Lyric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Lyric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Lyric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Lyric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels3(l, v)
}
func easyjson163c17a9DecodeEffectiveMobileInternalDomainModels4(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeEffectiveMobileInternalDomainModels4(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeEffectiveMobileInternalDomainModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeEffectiveMobileInternalDomainModels4(l, v)
}
